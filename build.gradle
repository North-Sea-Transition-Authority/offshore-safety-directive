plugins {
	id 'org.springframework.boot' version '2.7.1'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id "org.sonarqube" version "3.3"
	id 'checkstyle'
	id 'jacoco'
}

group = 'uk.co.nstauthority'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
	mavenCentral()
	maven {
		// Required for opensaml deps
		url "https://build.shibboleth.net/nexus/content/repositories/releases/"
	}
	maven {
		url "http://nexus.fivium.local:8081/repository/maven-releases/"
		allowInsecureProtocol = true
	}
	maven {
		url "http://nexus.fivium.local:8081/repository/maven-snapshots/"
		allowInsecureProtocol = true
	}
}

dependencies {

	// OpenSAML 4.1+ is required for most SAML functionality
	// See the Spring samples e.g. https://github.com/spring-projects/spring-security-samples/blob/main/servlet/spring-boot/java/saml2/login/build.gradle
	constraints {
		implementation "org.opensaml:opensaml-core:4.2.0"
		implementation "org.opensaml:opensaml-saml-api:4.2.0"
		implementation "org.opensaml:opensaml-saml-impl:4.2.0"
	}

	implementation 'com.google.guava:guava:31.1-jre'
	implementation 'org.apache.commons:commons-lang3:3.12.0'
	implementation 'org.springframework.boot:spring-boot-starter-freemarker'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-configuration-processor'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.security:spring-security-saml2-service-provider'
	implementation 'org.springframework.session:spring-session-core'
	implementation 'org.flywaydb:flyway-core:8.5.13'
	implementation 'org.apache.commons:commons-lang3:3.12.0'
	implementation 'uk.co.fivium.energyportalapi:client:develop-SNAPSHOT'

	runtimeOnly 'org.postgresql:postgresql:42.4.1'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	// Using H2 for the tests as a temporary measure until a final decision is made on which database is being used.
	// This will be updated/removed when https://ogajira.atlassian.net/browse/OSDOP-204 is picked up.
	testImplementation 'com.h2database:h2:2.1.214'
	testImplementation 'org.springframework.security:spring-security-test'

}

tasks {
	test {
		useJUnitPlatform()
		finalizedBy jacocoTestReport
		systemProperty 'spring.profiles.active', 'test'
	}
	bootJar {
		archiveFileName.set("${rootProject.name}.jar")
	}
}

sonarqube {
	properties {
		property "sonar.projectKey", "Fivium_${rootProject.name}"
		property "sonar.organization", "fivium-gh"
		property "sonar.host.url", "https://sonarcloud.io"
		property 'sonar.login', System.getenv('SONARCLOUD_TOKEN')

		if (System.getenv("DRONE_PULL_REQUEST") != null) {
			property 'sonar.pullrequest.key', System.getenv('DRONE_PULL_REQUEST')
			property 'sonar.pullrequest.base', System.getenv('DRONE_TARGET_BRANCH')
			property 'sonar.pullrequest.branch', System.getenv('DRONE_SOURCE_BRANCH')
			property 'sonar.pullrequest.provider', 'github'
			property 'sonar.pullrequest.github.repository', 'offshore-safety-directive'
			property 'sonar.pullrequest.github.endpoint', 'https://api.github.com/'
		} else {
			property 'sonar.branch.name', System.getenv('DRONE_BRANCH')
			if (System.getenv('DRONE_BRANCH') != 'develop') {
				property 'sonar.branch.target', 'develop'
			}
			property 'sonar.coverage.jacoco.xmlReportPaths', "$buildDir/reports/jacoco/test/jacocoTestReport.xml"
		}
	}
}

checkstyle {
	config = rootProject.resources.text.fromFile('devtools/checkstyle.xml')
	toolVersion '9.3'
	ignoreFailures = false
	maxWarnings = 0
}

jacocoTestReport {
	reports {
		xml.required = true
	}
}
