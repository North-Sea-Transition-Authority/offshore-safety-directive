plugins {
	id 'org.springframework.boot' version '2.7.1'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id "org.sonarqube" version "3.3"
	id 'checkstyle'
	id 'jacoco'
	id 'maven-publish'
	id 'nu.studer.jooq' version '8.1'
	// docker-compose needed to startup a postgres container for Jooq codegen
	id 'com.avast.gradle.docker-compose' version "0.16.9"
	// Flyway added manually here, as it's used for the Jooq codegen
	id "org.flywaydb.flyway" version "9.12.0"
}

group = 'uk.co.nstauthority'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
	mavenLocal()
	mavenCentral()
	maven {
		// Required for opensaml deps
		url "https://build.shibboleth.net/nexus/content/repositories/releases/"
	}
	maven {
		url "https://nexus.fivium.co.uk/repository/maven-releases/"
	}
	maven {
		url "https://nexus.fivium.co.uk/repository/maven-snapshots/"
	}
}

sourceSets {
	epmqMessagesJarIntegrationTest {}
}

dependencies {

	// OpenSAML 4.1+ is required for most SAML functionality
	// See the Spring samples e.g. https://github.com/spring-projects/spring-security-samples/blob/main/servlet/spring-boot/java/saml2/login/build.gradle
	constraints {
		implementation "org.opensaml:opensaml-core:4.2.0"
		implementation "org.opensaml:opensaml-saml-api:4.2.0"
		implementation "org.opensaml:opensaml-saml-impl:4.2.0"
	}

	implementation 'org.springframework.boot:spring-boot-starter-freemarker'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-configuration-processor'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.security:spring-security-saml2-service-provider'
	implementation 'org.springframework.session:spring-session-core'

	implementation 'org.springframework.boot:spring-boot-starter-jooq'
  	implementation 'org.jooq:jooq-codegen'
  	implementation 'org.jooq:jooq-meta'

	implementation 'com.google.guava:guava:31.1-jre'
	implementation 'org.apache.commons:commons-lang3:3.12.0'
	implementation 'org.flywaydb:flyway-core:8.5.13'

	implementation 'uk.co.fivium.energyportalapi:client:v6.2.0'
	implementation 'uk.co.fivium.digital.energyportalteamaccesslibrary:energy-portal-team-access-libray:develop-SNAPSHOT'
	implementation 'uk.co.fivium.digitalformlibrary:digital-form-library:v2.1.1'

	implementation 'com.amazonaws:aws-java-sdk-s3:1.12.307'
	implementation 'fi.solita.clamav:clamav-client:1.0.1'

	implementation 'uk.co.fivium:fivium-notify-spring-boot-starter:3.17.2-4.2-SNAPSHOT'
	implementation 'commons-validator:commons-validator:1.7'

	implementation 'uk.co.fivium.energyportalmessagequeue:spring-boot-starter:EPMQ-18-add-created-instant-to-epmq-message-SNAPSHOT' // TODO: Update to release version as part of https://ogajira.atlassian.net/browse/OSDOP-437
	implementation 'uk.co.fivium.energyportalmessagequeue:messages:EPMQ-18-add-created-instant-to-epmq-message-SNAPSHOT' // TODO: Update to release version as part of https://ogajira.atlassian.net/browse/OSDOP-17

	runtimeOnly 'org.postgresql:postgresql'
	jooqGenerator 'org.postgresql:postgresql'

	// for test which require a database but not requiring a full postgres database
	testImplementation 'com.h2database:h2:2.1.214'

	// for test requiring an actual postgres database be used and the flyway migrations run
	testImplementation "org.testcontainers:postgresql:1.18.3"

	testImplementation 'com.tngtech.archunit:archunit-junit5:1.0.1'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'

	epmqMessagesJarIntegrationTestImplementation 'org.springframework.boot:spring-boot-starter-test'
	epmqMessagesJarIntegrationTestImplementation 'uk.co.fivium.offshoresafetydirective:epmq-messages:integration-test'
	epmqMessagesJarIntegrationTestImplementation 'uk.co.fivium.energyportalmessagequeue:spring-boot-starter:EPMQ-18-add-created-instant-to-epmq-message-SNAPSHOT' // TODO: Update to release version as part of https://ogajira.atlassian.net/browse/OSDOP-437
	epmqMessagesJarIntegrationTestImplementation 'uk.co.fivium.energyportalmessagequeue:messages:EPMQ-18-add-created-instant-to-epmq-message-SNAPSHOT' // TODO: Update to release version as part of https://ogajira.atlassian.net/browse/OSDOP-17
}

tasks {
	test {
		useJUnitPlatform()
		finalizedBy jacocoTestReport
		systemProperty 'spring.profiles.active', 'test'
	}
	bootJar {
		archiveFileName.set("${rootProject.name}.jar")
	}
}

dockerCompose {
  useComposeFiles = ['local-dev-compose.yml']
  startedServices = ['database']
}

flyway {
  user = 'osd_app'
  password = 'dev'
  schemas = ['osd']
}

//Set the url before the build to dynamically set the port
//This must be done here, not above, as the serviceInfos object won't exist at configuration time
flywayMigrate.doFirst {
  url = 'jdbc:postgresql://' + dockerCompose.servicesInfos['database'].host + ':' + dockerCompose.servicesInfos['database'].ports[5432] + '/osd'
  System.setProperty('DB_URL', url)
}

jooq {
  version = dependencyManagement.importedProperties['jooq.version']
  configurations {
    main {
      generateSchemaSourceOnCompilation = false
      generationTool {
        jdbc {
          driver = 'org.postgresql.Driver'
          user = 'osd_app'
          password = 'dev'
        }
        generator {
          database {
            name = 'org.jooq.meta.postgres.PostgresDatabase'
            inputSchema = 'osd'
          }
          target {
            packageName = 'uk.co.nstauthority.offshoresafetydirective.generated.jooq'
          }
        }
      }
    }
  }
}

flywayMigrate.dependsOn(composeUp)

generateJooq.dependsOn(flywayMigrate)

generateJooq.finalizedBy(composeDown)

generateJooq.doFirst {
  //Jooq doesn't allow you to specify the config at runtime
  //This will make the field modifiable so we can change the url
  def clazz = generateJooq.class.superclass
  def field = clazz.getDeclaredField("jooqConfiguration")

  field.accessible = true

  def jooqConfiguration = (org.jooq.meta.jaxb.Configuration) field.get(generateJooq)
  jooqConfiguration.jdbc.url = System.getProperty('DB_URL')
}

sonarqube {
	properties {
		property "sonar.projectKey", "Fivium_${rootProject.name}"
		property "sonar.organization", "fivium-gh"
		property "sonar.host.url", "https://sonarcloud.io"
		property 'sonar.login', System.getenv('SONARCLOUD_TOKEN')

		if (System.getenv("DRONE_PULL_REQUEST") != null) {
			property 'sonar.pullrequest.key', System.getenv('DRONE_PULL_REQUEST')
			property 'sonar.pullrequest.base', System.getenv('DRONE_TARGET_BRANCH')
			property 'sonar.pullrequest.branch', System.getenv('DRONE_SOURCE_BRANCH')
			property 'sonar.pullrequest.provider', 'github'
			property 'sonar.pullrequest.github.repository', 'offshore-safety-directive'
			property 'sonar.pullrequest.github.endpoint', 'https://api.github.com/'
		} else {
			property 'sonar.branch.name', System.getenv('DRONE_BRANCH')
			if (System.getenv('DRONE_BRANCH') != 'develop') {
				property 'sonar.branch.target', 'develop'
			}
			property 'sonar.coverage.jacoco.xmlReportPaths', "$buildDir/reports/jacoco/test/jacocoTestReport.xml"
		}
	}
}

checkstyle {
	config = rootProject.resources.text.fromFile('devtools/checkstyle.xml')
	toolVersion '9.3'
	ignoreFailures = false
	maxWarnings = 0
}

checkstyleMain.exclude 'uk/co/nstauthority/offshoresafetydirective/generated/**'

jacocoTestReport {
	reports {
		xml.required = true
	}
}

tasks.register('epmqMessagesJar', Jar) {
	from sourceSets.main.output
	include 'uk/co/nstauthority/offshoresafetydirective/epmqmessage/**'
	archiveBaseName = 'offshore-safety-directive-epmq-messages'
}

publishing {
	publications {
		epmqMessages(MavenPublication) {
			groupId = 'uk.co.fivium.offshoresafetydirective'
			artifactId = 'epmq-messages'
			version = System.getenv("EPMQ_MESSAGES_JAR_VERSION") ?: version

			artifact(epmqMessagesJar)
		}
		epmqMessagesIntegrationTest(MavenPublication) {
			groupId = 'uk.co.fivium.offshoresafetydirective'
			artifactId = 'epmq-messages'
			version = 'integration-test'

			artifact(epmqMessagesJar)
		}
	}
	repositories {
		maven {
			name = 'snapshots'
			url = 'https://nexus.fivium.co.uk/repository/maven-snapshots'
			credentials {
				username = System.getenv("NEXUS_USERNAME")
				password = System.getenv("NEXUS_PASSWORD")
			}
		}

		maven {
			name = 'releases'
			url = 'https://nexus.fivium.co.uk/repository/maven-releases'
			credentials {
				username = System.getenv("NEXUS_USERNAME")
				password = System.getenv("NEXUS_PASSWORD")
			}
		}
	}
}

tasks.register('epmqMessagesJarIntegrationTest', Test) {
	useJUnitPlatform()
	group 'verification'
	//Need to explicitly override the default classesDirs and classpath for a test task
	testClassesDirs = sourceSets.epmqMessagesJarIntegrationTest.output.classesDirs
	classpath = sourceSets.epmqMessagesJarIntegrationTest.runtimeClasspath

	mustRunAfter(publishEpmqMessagesIntegrationTestPublicationToMavenLocal)
}

tasks.register('epmqMessagesJarIntegrationTestReport', TestReport) {
	destinationDir = file("$buildDir/reports/epmqMessagesJarIntegrationTests")
	//Specify test result directory rather than task names so this task runs even if the tests fail
	testResultDirs = [epmqMessagesJarIntegrationTest.binResultsDir]

	mustRunAfter(epmqMessagesJarIntegrationTest)
}
